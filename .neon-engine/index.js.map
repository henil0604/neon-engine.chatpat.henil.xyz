{"version":3,"sources":["../app/routes/index.ts","../app/modules/Database.ts","../app/modules/Env.ts","../app/core/ServerFactory.ts","../app/modules/getRouterFactory.ts","../app/index.ts"],"sourcesContent":["import { RouterFactory } from \"@/types/core.js\";\r\n\r\nexport const factory: RouterFactory = (ctx) => {\r\n    return {\r\n        method: 'GET',\r\n        path: '/',\r\n        handler: (request, h) => {\r\n            return 'Hello!';\r\n        }\r\n    }\r\n}","import { PrismaClient } from \"@prisma/client\";\r\n\r\n// creates new global that also includes prisma object as extra property \r\nconst globalForPrisma = globalThis as unknown as {\r\n    prisma: PrismaClient | undefined;\r\n};\r\n\r\n// checks if the server is running on development mode or not\r\nconst isDev = process.env.NODE_ENV === 'development'\r\n\r\n// creates db object\r\nexport const db =\r\n    globalForPrisma.prisma ?? // if the global object already has prisma, use it\r\n    new PrismaClient({\r\n        log:\r\n            isDev ? [\"query\", \"error\", \"warn\"] : [\"error\"],\r\n    });\r\n\r\n// if the server is in development mode, set a global prisma object\r\nif (isDev) globalForPrisma.prisma = db;","import dotenv from 'dotenv';\r\nimport { z, ZodSchema } from 'zod';\r\n\r\n/**\r\n * Env module is responsible for fetching environment variables\r\n * It also parses the result as per defined Zod Schema\r\n */\r\nexport default class Env {\r\n    private constructor() { }\r\n\r\n    private static parse<T extends ZodSchema<any>>(schema: T, value: string): ReturnType<T['parse']> {\r\n        return schema.parse(value) as ReturnType<T['parse']>;\r\n    }\r\n\r\n    public static get<T extends keyof typeof Env.Schema>(key: T): ReturnType<typeof Env.Schema[T]['parse']> {\r\n        dotenv.config();\r\n        const value = process.env[key];\r\n\r\n        if (!value) {\r\n            throw new Error(`[module:env] ${key} does not exist`);\r\n        }\r\n\r\n        return this.parse(Env.Schema[key], value);\r\n    }\r\n\r\n    public static has(key: keyof typeof Env.Schema): boolean {\r\n        return Boolean(this.get(key));\r\n    }\r\n\r\n    public static Schema = {\r\n        PORT: z.string(),\r\n    } as const;\r\n}\r\n","import { db } from \"@/modules/Database.js\";\r\nimport Env from \"@/modules/Env.js\";\r\nimport { RouterFactory, RouterFactoryContext, ServerEvents } from \"@/types/core.js\";\r\nimport Hapi from \"@hapi/hapi\";\r\nimport mitt, { type Emitter } from 'mitt';\r\n\r\n/*\r\n    ServerStats Interface is where all boolean/meta values will be stored\r\n    eg. is_running, etc...\r\n*/\r\nexport interface ServerStats {\r\n    // shows if server is running or stopped\r\n    is_running: boolean;\r\n}\r\n\r\n/*\r\n    ServerFactory is factory class which will manage all\r\n    the server related methods. The Factory is basically\r\n    a way to bake the server\r\n*/\r\nexport default class ServerFactory {\r\n    // Hapi Server instance\r\n    public server: Hapi.Server;\r\n\r\n    // Event Emitter that will be used to pass different events throughout server\r\n    public events: Emitter<ServerEvents>;\r\n\r\n    // stats of the server\r\n    public stats: ServerStats = {\r\n        is_running: false\r\n    };\r\n\r\n    public constructor() {\r\n        // Creating new instance of Hapi server\r\n        this.server = Hapi.server({\r\n            // get port from Environment Variables\r\n            port: Env.get(\"PORT\")\r\n        })\r\n\r\n        this.events = mitt<ServerEvents>()\r\n    }\r\n\r\n    /*\r\n        start method is responsible for starting a server\r\n        it first starts the server\r\n        then changes the stats\r\n        then the $onServerStart Event is triggered\r\n    */\r\n    public async start() {\r\n        await this.server.start();\r\n        this.stats.is_running = true;\r\n        return this;\r\n    }\r\n\r\n    public async stop() {\r\n        await this.server.stop();\r\n        this.stats.is_running = false;\r\n        return this;\r\n    }\r\n\r\n    public addRoute(routerFactory: RouterFactory) {\r\n        const routerData = routerFactory(this.createRouterFactoryContext())\r\n\r\n        return this.server.route(routerData);\r\n    }\r\n\r\n    private createRouterFactoryContext(): RouterFactoryContext {\r\n        return {\r\n            factory: this,\r\n            db: db\r\n        }\r\n    }\r\n\r\n}","const Schema = {\r\n    '/': await import('@/routes/index.js'),\r\n};\r\n\r\n\r\nexport default function getRouterFactory(path: keyof typeof Schema) {\r\n    return Schema[path].factory;\r\n}","import ServerFactory from \"@/core/ServerFactory.js\";\r\nimport getRouterFactory from \"@/modules/getRouterFactory.js\";\r\n\r\n// making a instance of ServerFactory\r\nconst Factory = new ServerFactory();\r\n\r\n// Adding a Routes\r\nFactory.addRoute(getRouterFactory(\"/\"))\r\n\r\n// Starting the server\r\nFactory.start()\r\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,IAEa;AAFb;AAAA;AAAA;AAEO,IAAM,UAAyB,wBAAC,QAAQ;AAC3C,aAAO;AAAA,QACH,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,SAAS,CAAC,SAAS,MAAM;AACrB,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ,GARsC;AAAA;AAAA;;;ACFtC,SAAS,oBAAoB;AAG7B,IAAM,kBAAkB;AAKxB,IAAM,QAAQ,QAAQ,IAAI,aAAa;AAGhC,IAAM,KACT,gBAAgB;AAChB,IAAI,aAAa;AAAA,EACb,KACI,QAAQ,CAAC,SAAS,SAAS,MAAM,IAAI,CAAC,OAAO;AACrD,CAAC;AAGL,IAAI;AAAO,kBAAgB,SAAS;;;ACnBpC,OAAO,YAAY;AACnB,SAAS,SAAoB;AAM7B,IAAqB,OAArB,MAAyB;AAAA,EACb,cAAc;AAAA,EAAE;AAAA,EAExB,OAAe,MAAgC,QAAW,OAAuC;AAC7F,WAAO,OAAO,MAAM,KAAK;AAAA,EAC7B;AAAA,EAEA,OAAc,IAAuC,KAAmD;AACpG,WAAO,OAAO;AACd,UAAM,QAAQ,QAAQ,IAAI,GAAG;AAE7B,QAAI,CAAC,OAAO;AACR,YAAM,IAAI,MAAM,gBAAgB,oBAAoB;AAAA,IACxD;AAEA,WAAO,KAAK,MAAM,KAAI,OAAO,GAAG,GAAG,KAAK;AAAA,EAC5C;AAAA,EAEA,OAAc,IAAI,KAAuC;AACrD,WAAO,QAAQ,KAAK,IAAI,GAAG,CAAC;AAAA,EAChC;AAKJ;AAzBA,IAAqB,MAArB;AAAqB;AAsBjB,cAtBiB,KAsBH,UAAS;AAAA,EACnB,MAAM,EAAE,OAAO;AACnB;;;AC5BJ,OAAO,UAAU;AACjB,OAAO,UAA4B;AAgBnC,IAAqB,gBAArB,MAAmC;AAAA;AAAA,EAExB;AAAA;AAAA,EAGA;AAAA;AAAA,EAGA,QAAqB;AAAA,IACxB,YAAY;AAAA,EAChB;AAAA,EAEO,cAAc;AAEjB,SAAK,SAAS,KAAK,OAAO;AAAA;AAAA,MAEtB,MAAM,IAAI,IAAI,MAAM;AAAA,IACxB,CAAC;AAED,SAAK,SAAS,KAAmB;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,QAAQ;AACjB,UAAM,KAAK,OAAO,MAAM;AACxB,SAAK,MAAM,aAAa;AACxB,WAAO;AAAA,EACX;AAAA,EAEA,MAAa,OAAO;AAChB,UAAM,KAAK,OAAO,KAAK;AACvB,SAAK,MAAM,aAAa;AACxB,WAAO;AAAA,EACX;AAAA,EAEO,SAAS,eAA8B;AAC1C,UAAM,aAAa,cAAc,KAAK,2BAA2B,CAAC;AAElE,WAAO,KAAK,OAAO,MAAM,UAAU;AAAA,EACvC;AAAA,EAEQ,6BAAmD;AACvD,WAAO;AAAA,MACH,SAAS;AAAA,MACT;AAAA,IACJ;AAAA,EACJ;AAEJ;AArDqB;;;ACpBrB,IAAM,SAAS;AAAA,EACX,KAAK,MAAM;AACf;AAGe,SAAR,iBAAkC,MAA2B;AAChE,SAAO,OAAO,IAAI,EAAE;AACxB;AAFwB;;;ACDxB,IAAM,UAAU,IAAI,cAAc;AAGlC,QAAQ,SAAS,iBAAiB,GAAG,CAAC;AAGtC,QAAQ,MAAM;","names":[]}